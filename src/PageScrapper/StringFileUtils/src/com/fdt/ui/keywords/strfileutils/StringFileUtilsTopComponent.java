/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fdt.ui.keywords.strfileutils;

import com.fdt.keywords.scrapper.KeyWordContainer;
import com.fdt.utils.Constants;
import com.fdt.utils.Utils;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.fdt.ui.keywords.strfileutils//StringFileUtils//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "StringFileUtilsTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "com.fdt.ui.keywords.strfileutils.StringFileUtilsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_StringFileUtilsAction",
        preferredID = "StringFileUtilsTopComponent"
)
@Messages({
    "CTL_StringFileUtilsAction=StringFileUtils",
    "CTL_StringFileUtilsTopComponent=StringFileUtils Window",
    "HINT_StringFileUtilsTopComponent=This is a StringFileUtils window"
})
public final class StringFileUtilsTopComponent extends TopComponent {
    
    private static final Logger log = Logger.getLogger(StringFileUtilsTopComponent.class);

    public StringFileUtilsTopComponent() {
        initComponents();
        setName(Bundle.CTL_StringFileUtilsTopComponent());
        setToolTipText(Bundle.HINT_StringFileUtilsTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel1.text")); // NOI18N

        jTextField1.setEditable(false);
        jTextField1.setText(org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jTextField1.text")); // NOI18N
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setText(org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jTextField2.text")); // NOI18N
        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField2MouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jCheckBox1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField3.setEditable(false);
        jTextField3.setText(org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jTextField3.text")); // NOI18N
        jTextField3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField3MouseClicked(evt);
            }
        });
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel4.text")); // NOI18N

        jTextField4.setEditable(false);
        jTextField4.setText(org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jTextField4.text")); // NOI18N
        jTextField4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField4MouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField5.setEditable(false);
        jTextField5.setText(org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jTextField5.text")); // NOI18N
        jTextField5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField5MouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel6.text")); // NOI18N

        jTextField6.setEditable(false);
        jTextField6.setText(org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jTextField6.text")); // NOI18N
        jTextField6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField6MouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel7.text")); // NOI18N

        jTextField7.setEditable(false);
        jTextField7.setText(org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jTextField7.text")); // NOI18N
        jTextField7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField7MouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel8.text")); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel9.text")); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(StringFileUtilsTopComponent.class, "StringFileUtilsTopComponent.jLabel10.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(358, 358, 358)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4)
                            .addComponent(jTextField3)
                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(241, 241, 241)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(299, 299, 299)
                                .addComponent(jLabel10)))
                        .addGap(0, 257, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jTextField2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField6)
                                    .addComponent(jTextField7)))
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(82, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyWordFilePath = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextField1.setText(keyWordFilePath.getAbsolutePath());
        } else {
            log.info("File access cancelled by user.");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jTextField2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MouseClicked
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyWordFilePath = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextField2.setText(keyWordFilePath.getAbsolutePath());
        } else {
            log.info("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jButton1.setEnabled(false);
        String keyWordFilePath= jTextField1.getText();
        String keyWordFilteredFilePath = jTextField2.getText();
        //удалить дубли вместе с исходниками (true) иначе просто удалить дубли (false)
        boolean delDplWSource = jCheckBox1.isSelected();

        File inFile = new File(keyWordFilePath);
        File outFile = new File(keyWordFilteredFilePath);

        try{
            if(outFile.exists() && outFile.isFile()){
                outFile.delete();
            }
            
            List<String> strList =  Utils.loadFileAsStrList(inFile);
            
            HashMap<String, Integer> strMapCount = new HashMap<String, Integer>();
            
            
            for(String str : strList){
                if(strMapCount.get(str) != null){
                    strMapCount.put(str, strMapCount.get(str) + 1);
                }else{
                    strMapCount.put(str, 1);
                }
            }

            saveDuplicatedStrsToFile(outFile, strMapCount, delDplWSource);

            JOptionPane.showMessageDialog(null, "Файл успешно сохранён", "Информация", JOptionPane.INFORMATION_MESSAGE);

            jButton1.setEnabled(true);
        }catch(Throwable e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage(), "ОШИБКА", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField3MouseClicked
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyWordFilePath = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextField3.setText(keyWordFilePath.getAbsolutePath());
        } else {
            log.info("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField3MouseClicked

    private void jTextField4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField4MouseClicked
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyWordFilePath = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextField4.setText(keyWordFilePath.getAbsolutePath());
        } else {
            log.info("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField4MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jButton2.setEnabled(false);
        String file4CleanFilePath= jTextField3.getText();
        String string4CleanFilePath= jTextField4.getText();
        String resultFile = jTextField5.getText();

        File inFile = new File(file4CleanFilePath);
        File inWStr4CleanFile = new File(string4CleanFilePath);
        File outFile = new File(resultFile);
        
        int strCountStart = 0;

        try{
            //delete output file
            if(outFile.exists() && outFile.isFile()){
                outFile.delete();
            }
           
            List<String> str4CleanList =  Utils.loadFileAsStrList(inFile);
            List<String> strWithCleanList =  Utils.loadFileAsStrList(inWStr4CleanFile);
            
            strCountStart = str4CleanList.size();
            
            Collections.sort(str4CleanList, new Comparator<String>(){
                @Override
                public int compare(String o1, String o2) {
                        return o2.compareTo(o1);
                }	
            });
            
            Collections.sort(strWithCleanList, new Comparator<String>(){
                @Override
                public int compare(String o1, String o2) {
                        return o2.compareTo(o1);
                }	
            });

            int idx4Clean = 0;

            for(int i = 0; i < strWithCleanList.size(); i++){

                String cleanWord = strWithCleanList.get(i);

                while(str4CleanList.get(idx4Clean).compareTo(cleanWord) >= 0)
                {
                    if(str4CleanList.get(idx4Clean).startsWith(cleanWord)){
                        str4CleanList.remove(idx4Clean);
                        if(str4CleanList.size() == idx4Clean){
                                break;
                        }
                    }else{
                        idx4Clean++;
                    }
                }
            }
            
            /*for(String cleanStr  : strWithCleanList){
                ArrayList<Integer> idx4CleanList = new ArrayList<Integer>();
                for(int j = str4CleanList.size()-1; j >= 0 ;j--){
                    if(str4CleanList.get(j).startsWith(cleanStr)){
                        idx4CleanList.add(j);
                    }
                }
                
                for(Integer idx : idx4CleanList){
                    str4CleanList.remove((int)idx);
                }
            }*/

            saveListStrsToFile(outFile, str4CleanList);

            JOptionPane.showMessageDialog(null, String.format("Файл успешно сохранён\r\nНачальное кол-во %d\r\nКол-во на выходе:%d",strCountStart,str4CleanList.size()), "Информация", JOptionPane.INFORMATION_MESSAGE);

            jButton2.setEnabled(true);
        }catch(Throwable e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage(), "ОШИБКА", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField5MouseClicked
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyWordFilePath = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextField5.setText(keyWordFilePath.getAbsolutePath());
        } else {
            log.info("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField5MouseClicked

    private void jTextField6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField6MouseClicked
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyWordFilePath = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextField6.setText(keyWordFilePath.getAbsolutePath());
        } else {
            log.info("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField6MouseClicked

    private void jTextField7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField7MouseClicked
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyWordFilePath = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextField7.setText(keyWordFilePath.getAbsolutePath());
        } else {
            log.info("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField7MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jButton3.setEnabled(false);
        String keyWordFilePath= jTextField6.getText();
        String keyWordFilteredFilePath = jTextField7.getText();

        File inFile = new File(keyWordFilePath);
        File outFile = new File(keyWordFilteredFilePath);

        try{
            if(outFile.exists() && outFile.isFile()){
                outFile.delete();
            }
            
            List<String> strLinks =  Utils.loadFileAsStrList(inFile); 
            List<String> convertedLinks = new ArrayList<String>();
            
            for(String link : strLinks){
                String[] linkSplt = link.split(";",2);
                convertedLinks.add(String.format("<a href=\"%s\">%s</a>", linkSplt[0], linkSplt[1]));
            }

            saveListStrsToFile(outFile, convertedLinks);
            
            JOptionPane.showMessageDialog(null, "Файл успешно сохранён", "Информация", JOptionPane.INFORMATION_MESSAGE);

            jButton3.setEnabled(true);
        }catch(Throwable e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage(), "ОШИБКА", JOptionPane.ERROR_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File keyWordFilePath = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            jTextField3.setText(keyWordFilePath.getAbsolutePath());
        } else {
            log.info("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField3ActionPerformed

    public void saveDuplicatedStrsToFile(File file, HashMap<String, Integer> strs, boolean delDplWSource)
    {
        StringBuffer strBuf = new StringBuffer();

        int buffered = 0;

        for(String str : strs.keySet())
        {
            if(delDplWSource && strs.get(str) == 1 || !delDplWSource){
                strBuf.append(str).append(Constants.LINE_FEED);
                buffered++;
            }
   
            if(buffered > 1000){
                strBuf.setLength(strBuf.length() - Constants.LINE_FEED.length());
                Utils.appendStringToFile(strBuf.toString(), file);

                strBuf.setLength(0);
                buffered = 0;
            }
        }

        if(strBuf.length() > 0){
                strBuf.setLength(strBuf.length() - Constants.LINE_FEED.length());
                Utils.appendStringToFile(strBuf.toString(), file);
        }
    }
    
    public void saveListStrsToFile(File file, List<String> strs)
    {
        StringBuffer strBuf = new StringBuffer();
        
        int buffered = 0;

        for(String str : strs)
        {
            strBuf.append(str).append(Constants.LINE_FEED);
            buffered++;
   
            if(buffered > 1000){
                strBuf.setLength(strBuf.length() - Constants.LINE_FEED.length());
                Utils.appendStringToFile(strBuf.toString(), file);

                strBuf.setLength(0);
                buffered = 0;
            }
        }

        if(strBuf.length() > 0){
                strBuf.setLength(strBuf.length() - Constants.LINE_FEED.length());
                Utils.appendStringToFile(strBuf.toString(), file);
        }
        
        //create file
        Utils.appendStringToFile("", file);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
